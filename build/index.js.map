{"version":3,"sources":["../src/index.js"],"names":["app","use","bodyParser","json","urlencoded","extended","secret","resave","saveUninitialized","cookie","secure","get","req","res","send","routes","session","user","budget","err","next","locals","message","error","status","render","set","process","env","PORT","then","listen","console","log","MONGOLAB_URI"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,uBAAWE,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAtB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQ,gCAAQ;AACdK,EAAAA,MAAM,EAAE,gBADM;AAEdC,EAAAA,MAAM,EAAE,IAFM;AAGdC,EAAAA,iBAAiB,EAAE,IAHL;AAIdC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV;AAJM,CAAR,CAAR;AAMAV,GAAG,CAACW,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzB,SAAOA,GAAG,CAACC,IAAJ,WAAP;AACD,CAFD;AAGAd,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBc,mBAAOC,OAA3B;AACAhB,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBc,mBAAOE,IAAxB;AACAjB,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBc,mBAAOG,MAA1B,E,CAEA;;AACAlB,GAAG,CAACC,GAAJ,CAAQ,UAASkB,GAAT,EAAcP,GAAd,EAAmBC,GAAnB,EAAwBO,IAAxB,EAA8B;AAClC;AACAP,EAAAA,GAAG,CAACQ,MAAJ,CAAWC,OAAX,GAAqBH,GAAG,CAACG,OAAzB;AACAT,EAAAA,GAAG,CAACQ,MAAJ,CAAWE,KAAX,GAAmBX,GAAG,CAACZ,GAAJ,CAAQW,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCQ,GAAvC,GAA6C,EAAhE,CAHkC,CAKlC;;AACAN,EAAAA,GAAG,CAACW,MAAJ,CAAWL,GAAG,CAACK,MAAJ,IAAc,GAAzB;AACAX,EAAAA,GAAG,CAACY,MAAJ,CAAW,OAAX;AACD,CARH;AAUAzB,GAAG,CAAC0B,GAAJ,CAAQ,MAAR,EAAgBC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAApC;AACA,yBAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA,wBAAiB;AAAA;AAAA;AAAA;AAAA;AACf9B,UAAAA,GAAG,CAAC+B,MAAJ,CAAW/B,GAAG,CAACW,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAC9BqB,YAAAA,OAAO,CAACC,GAAR,uBAA2BjC,GAAG,CAACW,GAAJ,CAAQ,MAAR,CAA3B;AACAqB,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACC,GAAR,CAAYM,YAAxB;AACH,WAJD;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import 'babel-polyfill';\r\nimport 'dotenv/config';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport routes from './routes';\r\nimport session from 'express-session';\r\nimport models, { connectDb } from './models';\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({extended: true}));\r\napp.use(session({\r\n  secret: 'secret session',\r\n  resave: true,\r\n  saveUninitialized: true,\r\n  cookie: { secure: false }\r\n}))\r\napp.get('/', (req, res) => {\r\n  return res.send(`Success`);\r\n});\r\napp.use('/session', routes.session);\r\napp.use('/user', routes.user);\r\napp.use('/budget', routes.budget);\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n    // set locals, only providing error in development\r\n    res.locals.message = err.message;\r\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n  \r\n    // render the error page\r\n    res.status(err.status || 500);\r\n    res.render('error');\r\n  });\r\n  \r\napp.set('port', process.env.PORT || 3000);\r\nconnectDb().then(async () => {\r\n  app.listen(app.get('port'), () => {\r\n      console.log(`Listen port ${app.get('port')}!`)\r\n      console.log('Hello Node.js project.');\r\n      console.log(process.env.MONGOLAB_URI);\r\n  });\r\n})"],"file":"index.js"}